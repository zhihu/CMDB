// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package v1 generated by go-bindata.// sources:
// pkg/api/v1/service.swagger.json
package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5d\x73\xdb\x36\x97\xbe\xf7\xaf\x38\xa3\xee\xcc\xa6\x3b\xaa\xdc\xf8\x7d\x67\x67\xd7\x99\x5e\xb8\x89\x9b\x78\x27\xb1\x3d\xb6\x92\x5e\x94\x19\x0b\x22\x0f\x25\x34\x24\xc0\x02\xa0\x6c\x35\xe3\xff\xbe\x73\x00\x90\x04\x29\xca\x1f\xb2\x9d\x3a\x33\xf2\x45\x2b\x91\xc0\xc1\xf9\x7c\xce\x03\x90\xca\xd7\x1d\x80\x81\xbe\x64\xb3\x19\xaa\xc1\x3e\x0c\xf6\x46\x3f\x0f\x86\x74\x8d\x8b\x54\x0e\xf6\x81\xee\x03\x0c\x0c\x37\x19\xd2\xfd\xe2\xcb\x6c\x97\x15\x7c\x77\xf1\x72\x57\xa3\x5a\xf0\x18\x47\x85\x92\x46\xda\x49\x00\x83\x05\x2a\xcd\xa5\xa0\xa1\xfe\x23\x08\x69\x40\xa3\x19\xec\x00\x5c\x5b\xd1\xb1\x14\xba\xcc\x51\x0f\xf6\xe1\x0f\x37\x8b\x15\x45\xc6\x63\x66\xb8\x14\xbb\x7f\x6a\x29\x68\xec\x67\x3b\xb6\x50\x32\x29\xe3\x3b\x8e\x65\x66\xae\x1b\x9d\x49\x47\x52\x55\x4e\xff\xc4\xd8\x5c\x98\x65\x81\xcd\x5d\x80\xc1\x0c\x4d\xf0\x15\x60\x20\x0b\x54\x56\xee\x51\x42\xfa\x9f\xd8\x79\x63\x9a\x76\xf1\x9e\x6b\xe3\x4d\xb4\x43\x15\xea\x42\x0a\xdd\x12\x68\x6f\xec\xfd\xfc\x73\xe7\x12\xc0\x20\x41\x1d\x2b\x5e\x18\xef\x98\x03\xd0\x65\x1c\xa3\xd6\x69\x99\x41\x25\x69\x14\x88\xb7\x93\x74\x3c\xc7\x9c\xad\x08\x03\x18\xfc\x87\xc2\x94\xe4\xfc\xb0\x9b\x60\xca\x05\x27\xb9\x7a\x77\xf1\x92\x94\x0c\x94\x3e\xf3\x92\x07\xad\xf9\xd7\xc1\xb7\xeb\x70\xc9\x41\x82\x29\x2b\x33\x73\xbb\xfa\x02\x4a\x81\x57\x05\xc6\x06\x13\x40\xa5\xa4\xaa\xad\x78\xa8\x11\xaa\x14\x86\xe7\x78\x48\x42\x6f\xd0\x7b\xa7\xc7\x82\x41\xc1\x14\xcb\xd1\xa0\x6a\x92\xc5\xfd\x75\xcc\x11\x2c\xb7\xa9\xac\xe7\xf2\xf2\x22\xc1\x0c\x0d\x26\x5d\xbd\xb9\xb5\xf4\xaf\x12\xd5\xb2\x7b\x4b\xe1\x5f\x25\x57\x48\x29\x92\xb2\x4c\x63\xe7\x36\xa5\x19\xcd\x9d\x4a\x99\x21\x13\xdd\xd9\xa9\x54\x39\x33\xe1\x80\x75\xf1\x58\xa3\x35\x15\x0f\xd7\x06\x85\x79\x26\x3a\xd7\x9f\x3f\x07\xb1\x30\x6c\xd6\x8d\x42\x58\x4f\x8d\x80\xcf\x3b\x1d\xd3\x07\x85\xd4\x77\xaf\xcb\xd7\x0a\x99\xc1\x67\x5f\x99\x8d\xca\xdb\x62\xec\x4f\xeb\xa9\x4c\x56\xb2\xd6\x25\x74\xdf\x9d\x20\x9f\x8d\x2a\xbb\xe9\xfc\x44\xf1\x79\xf4\x44\x2f\xef\x9e\xe7\x1f\x8b\x64\x9b\xe7\xdb\x3c\x7f\xbc\xf8\xb8\x84\x3a\xc3\xbf\x4a\xd4\xe6\xe9\x93\x7e\x27\xf0\x5b\x2f\x31\xdb\xfd\x4a\x1e\xba\xde\x94\x9f\xbd\xc5\xe7\x4f\xcf\xb6\xc5\x51\xff\xad\x29\x0e\xfb\xff\xde\xe2\x20\x6a\x7f\xbf\xe2\xa8\x38\x8d\x36\x8a\x8b\xd9\x53\x30\x96\x1b\x72\xba\xb5\xcf\xb8\x23\xa1\xf9\xce\xc8\xcc\x36\x87\x9f\x2f\xc0\x3f\x1e\x9e\x3f\x02\x81\xf9\xce\xc8\xcb\x36\xaf\x9f\x6f\x5e\x3f\x11\x69\xb9\x2f\xb8\xef\x7e\xa5\xe6\xb2\x01\x57\xf9\x4e\xce\x91\x9c\xb2\xa4\xea\xf6\x08\xc9\xff\xad\x29\x0a\x4b\x32\x9e\x9e\xb0\xdc\xe1\x58\x68\xc1\xf1\xf2\xf1\x0f\x84\xbc\x2e\x9d\xbb\x28\xca\xbc\xe3\x1f\x7b\xfd\xd7\x83\xf3\xa3\xd7\x9d\xc1\x00\x83\xe3\x93\xb3\x0f\x07\xef\x57\xaf\x9f\x1d\xbd\x7e\xd7\x0e\xd0\xe7\x61\x37\x6b\xaa\x74\xf2\xb2\xef\xe9\x94\x5e\xd3\x1f\xcd\x2b\xf7\x54\xa6\x60\x33\xbc\x30\xf2\x0b\xae\x9c\xaf\xfd\xa3\x1a\x69\xfe\xf7\x9a\x14\x7e\x88\x42\x5c\x18\x9c\xa1\x5a\x7f\x92\xc8\x85\xf9\xd7\xde\x7d\x15\x7e\x86\x27\xb6\xdf\xa6\xd5\xec\xfe\xd7\xee\x25\x33\xf1\x7c\x93\x96\xf3\xbb\x9d\xf8\xb4\x3d\xe7\x85\x36\x0a\x59\xce\xc5\xac\xbe\xa6\x7f\xbc\x3b\x90\x57\x11\x70\x46\xaf\x22\x45\xa1\xc8\x36\xc3\x57\x54\x6e\x2c\xea\xeb\x3a\xfe\xee\xcd\x6d\xce\xba\xe7\x70\x81\xa2\x43\x28\xa0\x9b\x93\x5e\x9a\x6d\x56\xf7\x5b\xca\x77\xa4\x73\xeb\xa3\x9e\xbe\x04\x9d\xde\xd4\xbb\x74\xf3\x08\xce\xc9\x01\x67\x34\xc8\x14\x6e\x33\x65\xdb\xaf\xb7\xfd\x7a\xdb\xaf\xb7\xfd\x7a\xdb\xaf\xbf\x59\xbf\xde\xf4\x34\xfb\x7b\x3a\xc9\xde\x36\x99\xe7\xde\x64\xbe\xd1\x79\xfa\xb6\xdd\xf5\xb4\xbb\x47\x00\x9a\xfa\xa0\xd5\x41\xe8\x9d\xe0\xe3\x8d\x1b\xba\x45\x90\x2d\x82\xb8\xbb\xdf\x05\x82\x3c\x5a\x57\xae\xdf\x31\x0c\x42\xd7\xbc\x11\x68\xdf\x54\x9c\x96\xe9\x81\x58\x86\xad\x79\xcd\xf6\x73\xdd\xb6\xd3\x8e\xbf\x28\x55\xd6\x2d\xa8\x75\x06\x86\xa9\xb0\x60\x59\x89\xb7\x4c\x6c\xe5\x7e\x40\x67\x96\x26\x38\x88\xbd\xee\xa5\x23\x95\x85\xbf\x71\xcc\x92\x0f\x4c\x7f\x79\x88\x9d\xed\xf7\x29\x3b\x42\x98\x52\xac\x8d\xdb\x03\x6e\x30\x5f\xdd\xa1\xdf\x35\x03\xbb\xc5\x3c\x9e\x23\x68\xb4\x1b\xdc\x94\xac\x81\x9c\xe9\x2f\x60\x75\x1a\xf5\xb8\x21\x00\xcb\x96\x18\x3b\x61\x1f\xa2\x41\x3a\x62\xd1\x20\x12\x34\x26\xb8\x36\x1d\x25\x74\x35\x12\xef\x50\x21\x4c\xd2\x09\x28\x2c\x14\x6a\x14\x46\x03\xf3\x2b\x73\x01\x5a\xe6\x08\x4a\x4a\x03\x39\x6a\xcd\x66\x38\x84\x09\x9b\x00\x13\x09\x4c\xa6\x93\x48\xd8\x81\x9a\x46\x9a\x39\x56\x63\x20\x95\xa5\xb0\xd3\x27\xe9\x64\xe8\x06\x27\x93\x5a\x6c\x7d\xd7\xcc\x31\x12\xd5\x1c\x3b\x7a\x34\x9d\x8c\x48\xab\xdf\x6a\xcb\x35\x30\x85\x50\x6a\x4c\xc0\x48\xd0\x05\xc6\x3c\x5d\x02\x03\x5d\x4e\x43\x2f\x69\x30\x73\x66\x40\xcf\x65\x99\x25\x30\xc5\x48\x28\x34\xa5\x12\x98\xc0\x94\x86\xcf\x68\x6c\xd5\x3a\x40\x2a\xc8\x65\xc2\x53\xee\x6f\x0b\x28\xed\x23\x96\x66\xc8\xa8\xa3\x43\xa6\x25\xcc\xd9\x02\x81\x41\x5c\x6a\x23\x73\xf8\xbf\xf3\x93\x63\x40\x11\xcb\x84\x8b\x19\xbc\xd0\x88\x30\xc5\x4c\x5e\xfe\x68\x0d\xf8\x01\xdc\xf4\x0f\x76\x3a\x17\x70\xaa\x24\x65\x1f\x15\x26\xdd\xff\x7d\x8e\xc2\x59\xe5\x5d\x17\x4b\x61\xf0\xca\x1a\xc4\xa0\xa8\x07\x0f\x81\xd5\x50\x5e\xbb\x57\xaa\x48\xe8\x72\xfa\x53\xed\x3a\x0d\x29\xcf\x0c\x2a\x67\x0e\x89\x3b\x38\x3d\x22\x7f\x49\x91\x2d\xad\x68\x66\x97\x91\x1a\x2b\x77\x31\x1d\x09\xe7\x4d\xde\x28\x41\xc6\x8e\xe0\x37\xa9\x00\xaf\x58\x5e\x64\x38\x04\x9e\xd6\x77\xaa\x51\x85\xc2\x05\x97\xa5\x8e\x84\x1f\x45\x0a\xd8\xd7\x93\x5d\x90\x7a\x34\x66\x1a\x52\x99\x65\xf2\x52\xef\x93\xf5\x94\x8c\x29\x7c\x75\x1f\x00\x18\xec\xc3\xde\x5e\xf5\x6d\xda\xdc\x00\x48\x60\x1f\x5e\x36\x5f\xaf\x68\x64\xf5\xf5\xba\xfa\xb0\xa4\x41\xff\x72\xdf\xfc\xc5\xbf\xf7\xe1\x7f\x68\x25\xaa\x26\x7f\x62\x74\xc9\xb3\xcc\xbe\x94\x5d\xf9\xc3\x9b\x1f\x83\x05\x27\xd2\x50\x55\xde\xb9\x1a\x2e\x6d\xda\xfe\x1d\x89\x17\x66\x8e\x5c\xb9\x31\x4e\xc6\xd4\x15\xa8\x91\xd6\x1b\xbe\x49\xbb\x34\x97\x39\x37\xc6\xf9\xd3\x42\x12\x50\x4c\x23\x21\x4b\x53\x94\xe6\x47\x6b\xfb\xc6\xd6\x5f\xd7\x06\x46\xe2\x80\xca\x15\x19\x2d\xe5\x4b\x55\x5b\xd3\x18\xf9\x98\x38\xc0\x55\x8c\x85\x01\x66\xac\x8a\x19\xd3\x06\x0a\xa9\xb9\x4b\xfe\x14\x58\x24\x2c\x16\x80\xc3\x26\x9b\xb1\x47\x94\x78\x35\x7e\x82\x03\xcb\x4a\xae\x87\x06\xb2\xab\x53\x4b\x43\x57\xc5\x4d\x6d\xb9\x44\xd0\x36\x11\xb2\xac\x72\xe8\x0b\xa6\x29\x95\x5a\x2b\xa4\xc1\x80\x48\xcc\x19\xd5\x2d\xd6\x61\xc1\xc4\x55\xd2\xb1\x34\xe8\x8a\x9b\x85\x80\x98\x48\x74\xaa\x09\x24\x9e\xc6\x14\xcf\x96\x76\xed\xa5\x0f\x4c\x24\x8c\x2c\x7e\xca\x70\x81\xd9\x4a\x3e\x8e\xe0\x48\x40\xcc\x34\xba\x72\x3b\x3b\x3c\x1f\xf7\x5a\x15\xac\x57\x99\x95\x70\x85\xb1\xa9\x57\xa9\x45\x0f\x61\x5a\x5a\xff\xb4\xc5\x46\x22\xe3\xba\x2b\xb8\xaa\x26\x6d\x90\x25\xa1\xc3\x90\xc5\x73\xe0\x22\xe1\x0b\x9e\x94\x2c\xab\xd4\x8d\x84\xaf\xbc\x1a\xd3\x14\x6a\x59\xaa\x18\x81\xa4\xf7\x59\xe3\x41\x2a\x47\x33\x97\xc9\x30\x12\xd2\xcc\x51\x41\xc0\x0e\x20\x67\x4b\xca\x64\xc2\xa0\x11\xfc\x3e\xa7\x36\x50\xab\x56\xa9\xe4\xd3\x3d\x12\x71\x86\x4c\x65\x4b\x48\x64\x5c\xe6\x28\x8c\x2d\xf4\x19\x5a\xa1\x97\xdc\xcc\x81\x1b\x0d\x09\xc6\x19\xf3\x59\xe0\x15\x3e\x38\x3d\x1a\x01\x1c\x89\x48\x30\xb1\xb4\x3a\x3a\x07\x60\x9a\x52\x76\xc9\x35\x66\xed\x56\x1f\x34\x25\x60\x45\xaf\x22\x31\xc5\x39\x5b\x70\x2a\x53\xa9\x48\xb6\xee\xc7\x5a\xf7\xbc\x1c\x4e\x2a\xa7\x6b\x57\x32\x41\x34\xf9\x2a\xe2\xeb\x3a\xf1\x34\x5c\xce\x79\x3c\xaf\x52\x57\xa6\x3e\x9d\x98\x9a\xa1\x09\x9d\x4f\x9d\x69\x26\x09\xfe\x8d\xb4\xbe\xb4\x22\x93\x11\x8c\x3d\x02\xb7\x94\xaf\xe1\x78\xce\xc4\xcc\x39\xdb\x03\x8f\x5b\xa1\x41\x66\xe8\x05\x66\xf2\x61\x02\x19\x52\x17\xa2\x6b\x36\xa4\x1a\x4a\x61\x64\x19\xcf\x69\x59\x5b\xc2\xb5\x76\x5c\x43\xc1\x74\xd5\x62\x64\x24\x1c\x43\x98\xba\xd9\x5e\x57\xaf\xc2\xb0\x6e\x1a\x7c\x26\xa4\xa2\x6c\x6c\xa9\xc7\xb2\xac\xee\xf5\x0e\x42\x17\x61\xb7\xb1\x7d\xa3\x06\x91\x55\x68\x6a\xec\xa1\xc0\xf5\xb4\xdb\x21\x08\xbc\xac\xd6\xa3\xac\xa3\x58\x53\x1a\xa2\x48\x5c\x53\xb1\x59\x73\xc5\xb5\x71\x0f\x5b\xda\x2b\x38\x27\xb9\x00\xd5\x0e\x18\x41\x0d\x1d\x91\xe8\xd3\xca\x46\xa3\x42\x4c\x2f\x63\x15\x2a\x61\x62\xa1\x72\xb2\x82\x95\x9d\x0e\xbc\x12\xb3\x15\x51\x75\x8c\x5d\x0e\x3a\x57\x44\x62\xd5\x17\x86\xc8\x41\xed\x90\xba\xe9\xe4\xa8\x66\x56\x7c\xd7\x1d\x81\x26\x35\x54\x74\x9d\x61\x59\x55\xd8\xd8\x67\x7c\x81\xad\xa1\x5e\x42\x5f\x83\x6e\x37\xa5\x76\x47\xee\x6b\xc8\xf1\x3e\xfc\xf1\xf2\x73\xd8\xaf\x44\x12\x84\xfd\x3e\x2b\xfd\xdc\x2b\x7c\x2f\x14\x6e\xdd\xc5\x57\xfc\xcb\x3d\xd7\xf0\xac\xf7\x0f\x4b\x7b\xa3\xc1\xd0\xf2\xdf\x38\x1a\x7c\xae\xe7\x9a\x0e\x49\x98\xde\x53\xb5\x9b\xbc\x30\x84\xbd\xb6\x23\x80\x93\xff\x09\x44\x1d\x52\x12\x0e\x17\x4a\x2e\x78\x42\x39\xe0\x90\x88\xa0\x62\x81\x4a\xd1\x35\x33\xe7\xba\x22\x19\x10\x02\x20\x51\x5c\x9f\xd2\x04\x0c\x35\xf7\xb6\x55\xea\xd2\x94\x98\x6e\x82\x8a\xe4\x51\x03\xaf\x5b\xe8\x7f\x6a\x9f\x5a\x5d\x0e\x13\xb8\xb0\xd4\xc6\x16\x61\x80\x40\x76\x9d\x55\xea\xe3\x65\xd5\xec\xd0\xda\x92\x84\xa9\xf7\x0e\x45\x4c\x5c\x72\x55\x9f\x86\x21\xc8\x10\xbc\x86\xb5\x4b\x58\xb5\x0a\x65\xb6\x36\x4c\xc4\x58\xd5\x52\x83\xc3\x5e\xad\x40\x5a\xa0\xf5\x90\xe8\x7e\x22\x23\xe1\x88\x4c\x25\xd6\x19\x44\xae\x75\xa8\x98\x38\xfa\xde\xd4\x77\x2b\x95\x5a\x2c\x48\x56\x99\xec\x1c\xd6\xc7\x7d\x22\xd1\x47\x7e\x02\x91\x2d\xf6\x03\x73\xa6\x7b\xc8\x4f\x43\x7d\x1a\xe6\xad\xd1\x7b\xc0\x1d\xe4\x00\x2e\x64\x56\x56\xb0\xc1\x5d\x5b\xcf\x91\x09\x8f\x7b\xf5\xe6\x08\x21\xce\x38\x29\x5f\x13\xa7\x2f\x42\x5e\x5a\xd7\xd1\xe2\xd4\x4b\x30\x95\x0a\xed\xad\x94\x67\x99\x47\x1a\x5b\x22\xb6\x8b\xa1\xae\xcb\xc3\x47\xcf\xa5\x01\x57\x55\x88\x6c\x07\xb2\x5a\x70\xea\x4b\x97\x8c\x88\x42\xd3\xb5\x69\x2f\x53\x73\x6e\xff\x2b\x4a\xab\xaf\xef\x91\xb4\xb7\x72\x3a\x5a\xee\x78\xc9\x96\x15\xaa\x2e\x09\xc0\x1b\xe7\xd9\xec\x48\xca\x98\xb0\x8f\x09\x7f\xe0\xc5\x53\x52\xdd\x86\xef\x40\x3b\x52\xd2\xa2\x74\xbe\xc7\x65\x32\x66\x21\x20\xd7\x49\x64\x7b\x7e\xd3\x24\x75\x4f\x97\x84\x9a\x86\x39\x6f\x54\x25\x97\x20\xf5\x29\xed\xe9\x4c\x48\x86\xbf\x70\x91\x58\x7a\xd6\x4f\x7f\x7a\x30\x8b\xaa\xda\x31\x06\x4f\x2a\xe6\x92\x1a\x72\xb8\xb1\x73\xa4\xe7\x07\x78\x2d\x85\xe6\x49\x4d\x5f\xa8\x9f\xbc\x1b\x8f\x4f\x3d\xef\x74\x7b\x1f\x7b\x81\xb4\xb0\x09\xb7\xda\x78\x3d\xd5\x29\x35\xea\x76\x7e\xd6\xf5\xef\x03\x7d\x7a\x30\x7e\xfd\xae\xe6\xac\x32\x85\xd3\x8f\xe3\x56\x41\x6b\x66\xb8\x4e\x97\x6e\x45\x8d\x39\x13\x86\xc7\x3a\x12\x2f\x68\x20\x49\x73\xfd\xd6\x53\x4e\xb7\xd9\x2a\xb3\xcc\x6b\xa4\xab\x6d\xb3\xdd\x56\x1f\x56\xdb\x6a\x99\x86\xdc\xce\x63\x1a\x0d\x19\xae\x14\xa8\xdd\x8a\x13\x16\x92\x21\x9a\x8b\x59\x86\xbe\x65\xc3\xa5\x65\xb7\x6e\xc7\xc3\x14\x46\x42\x63\x41\x44\xb5\x3a\x1c\x88\x65\x9e\xb3\x91\x5b\x49\x83\x60\xb9\x05\x33\x4b\xc6\x69\x92\xe5\x79\xb1\x14\x0b\x54\xc6\x11\xb9\xdd\x54\xc9\x1c\x88\x38\xa8\x9f\x62\x96\x63\x46\x93\x68\x25\x3b\x4a\xd8\x78\x54\x99\x48\x09\x5a\xf5\xdc\xd8\x47\xcc\x85\xdd\x6e\x88\x69\x56\x93\x47\x35\x81\x6e\xf6\xc9\xd5\xcd\x53\x25\x53\x9e\x61\xd3\x84\x3e\x6a\x54\xe4\x4b\x05\xbf\xc0\xcb\x57\xd5\xd5\xd3\x39\x6d\x3b\x0b\xfb\xdf\x5f\x60\xef\x55\x6b\x57\x5c\xc9\xb2\x53\x6b\x41\xde\x4b\x09\xd7\x45\xc6\x96\x17\xd6\xfe\x50\xa4\xbf\xcf\x92\x44\xa1\xd6\x6d\xa9\x36\x20\x6e\xab\xcb\xba\xe4\x66\xe2\x55\x9e\xd8\x22\xcf\xa4\xb4\x78\xab\xcb\x78\xde\x18\x47\x63\x6b\x45\xea\xf3\x29\xb2\x6a\x14\xea\x53\x9d\x60\x05\x63\xac\x89\xd5\xf5\xeb\x56\x6a\x90\x77\x35\x59\x51\xe5\x46\x7d\xb6\xe5\xf2\xc3\x02\x7d\xad\x43\xbd\x3c\x8d\xee\xae\x7e\xcc\x72\x1c\xae\x2e\xd5\xde\x72\x10\x88\x9e\x08\xac\x92\x55\x77\x4f\xb0\x8c\x42\x66\x82\xce\x24\x69\xac\x86\x3f\xa9\x28\x18\x69\x37\x2b\x33\x56\x9d\x3d\x8c\xea\xba\xf6\x7b\xd0\x6e\x9a\xac\x64\xc6\xb9\xcd\xae\x0f\xfe\x5b\x6d\x8e\x5d\x05\x0c\x6a\x73\xe1\x3e\x06\xf4\xc5\x87\xd4\x87\xfa\xdf\xaf\x9a\x3b\xe7\xe5\xb4\x92\xa4\xcb\xe9\x45\xb5\xc6\x2f\xf0\xbf\xaf\xfa\x0e\x22\xc6\x6d\xfc\x8a\x99\x08\xd9\xd3\x9a\xf0\x86\x11\xb5\x52\x4e\xd4\x6d\x53\x02\x5d\x5a\x33\x9b\x16\xe9\xcd\x5d\x16\x68\xcd\xd2\xf0\x22\x1a\x34\xc6\x47\x03\x07\xde\x5c\x5b\x18\xfe\x91\x34\xa5\x4e\x57\xc1\x11\x17\xfe\x48\xa4\x02\xd7\x26\xbe\xf0\x09\x15\xb5\x2c\x5b\x97\x95\xcd\x1d\x12\x67\xc1\x75\x69\x37\x50\x6e\xcb\xed\x71\x75\x6e\xd1\xa8\x39\xf3\xb0\xea\x85\x9b\x16\x07\xf7\xd4\x4c\xfc\xd1\xe5\x82\x16\x73\x50\xcf\x45\x9c\x95\x49\xbd\x63\xb1\xea\xb9\x63\x26\xb7\x61\xb6\xbb\x87\xc9\xd1\xf1\xa7\x83\xf7\x47\x6f\x2e\x0e\xce\xde\x7e\xfc\x70\x78\x3c\x9e\x34\xfd\x90\x54\xb2\x00\x66\xdb\x71\xce\x8a\x82\x4d\xb3\xe0\x31\x56\xf3\x6e\xd5\xa4\x56\xb1\x73\x10\xec\xcf\x58\xf5\x32\x9f\xca\x8c\xc7\x6d\x55\xd2\x66\x3f\xb1\x3f\x68\x9d\xc7\xb7\x9e\x1a\x3d\xe0\x28\xbe\xef\xad\xb3\x3b\x3d\x6f\xa0\x5e\xb0\x6e\x5e\xdf\x4b\x1f\xeb\x5f\xf9\x08\xa5\xfa\x0c\xdc\x44\xa1\x04\x0d\xe3\xd9\x23\x3c\x56\xe8\x7f\x4c\x17\x3e\xe2\xe9\x7f\x2e\xd7\xfb\xdc\xa4\xe7\x15\xbd\x07\x44\x6b\xa6\x8a\xf8\xe2\x69\x3c\x3f\x37\xa6\x78\x22\xd1\x0f\x08\xaa\xd5\x4a\x1b\x66\xca\xb5\x81\xfd\xfe\x72\x62\xfd\x3f\xa8\xf1\xc0\x67\x87\x4f\x66\xe8\xba\xdf\x98\xde\x6e\xa9\x7f\x1e\xff\x40\xc3\x36\x89\xbd\x7f\xd2\xbc\x41\xce\x84\x8f\xf9\xee\x3d\x7d\xf3\x64\xa5\x99\x1b\x69\xdc\xfc\xd3\x38\x1b\x3c\xfc\x2d\xb9\x30\xff\xfd\xef\x35\x18\x6f\x7f\x37\x7a\x41\x00\xb6\x99\x70\xda\x78\xfc\x64\xa7\xf7\xca\x77\x3b\x93\xa7\x93\x9f\xa3\x61\x6b\x43\xd1\xf3\x4e\xf8\x80\x25\x89\xcd\x78\x96\x9d\xae\x7f\x33\xfc\x96\x1a\xf9\x80\x86\x7d\xb2\x0f\xe3\x37\x28\x94\xd6\x6f\xa3\x1e\x50\x34\xb4\x21\xdd\x24\x95\x56\x7f\x65\x0c\x4f\x81\x23\x6b\x5c\x13\x56\x2f\x5e\x99\x8b\xe0\x4d\xd9\xbb\xda\x72\xa3\x77\x29\x34\x0f\xf1\xea\x3f\x04\x29\xf6\x6c\xe4\xa2\x0f\x07\xd7\x79\xd9\xe6\x5f\x1b\xac\x6f\xf7\xcc\xa7\xce\x1b\x24\xf7\x76\xcf\xe3\xe8\x79\xcf\x77\x5a\xee\x68\xe0\x79\x07\x5c\x9f\x75\xec\x6f\xb5\xa4\xd5\x60\x9e\xb5\x29\xdd\xfe\xf6\xcd\xe1\xd8\x05\x7e\x03\x28\x1e\xb7\xf3\xf8\x7b\xf2\x72\xd9\xf3\x52\xe6\xb7\xf0\x73\xa9\x6f\x07\xf6\x7f\xac\x27\xdf\xae\xda\x53\xd3\x1d\xf7\xb6\xed\x23\xcb\xbf\x35\x87\xdb\xbf\x6d\x7f\x64\x22\x7e\x9f\xed\x42\x0f\xf3\xcb\xdb\x2f\x12\xde\x20\x72\xf5\xfd\xc3\x3b\xba\xe0\xd1\xcc\x97\xdd\x9d\xcc\x1d\x1c\xf0\x0d\x8c\x0f\x4b\x8b\x99\x78\x7e\x71\xcb\x6e\xa0\xef\xc7\x2d\x37\xfd\xb4\xe5\x66\xef\x7e\xe2\x78\xd9\xe7\xd4\x4e\x1e\xaf\xbe\x3a\xbf\xf2\xd2\xfc\xea\xeb\xf2\xad\x17\xe5\x3f\x07\xaf\x61\xf6\xbd\x1c\xdf\x55\x2c\xf8\xc9\xe2\x83\x63\xfe\x0c\xe8\xf0\x7d\x6a\xaf\x31\xfd\x6e\x0c\xb0\x21\x61\x1b\x05\xf2\x7c\x7c\x76\x74\xfc\x36\x8c\xdb\xd1\xf1\xf8\xf0\xed\xe1\x59\x78\xe9\xcd\xc9\xc7\x5f\xdf\x1f\x86\x57\x7e\x3d\x39\x79\x7f\x78\x70\x7c\x63\x7c\xbd\xe8\x8e\xbe\x1d\xfb\x36\x52\xfa\xe8\xf8\x68\x1c\x6a\xf3\xfa\xec\xf0\x60\xdc\xd2\xef\xe3\xe9\x9b\xce\x95\x37\x87\xef\x0f\xc7\x87\x37\x2a\x6c\xc5\xee\x54\x4e\xbe\xde\xb9\xde\xf9\xff\x00\x00\x00\xff\xff\x6a\xcc\x30\xa4\x07\x57\x00\x00")

func serviceSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceSwaggerJson,
		"service.swagger.json",
	)
}

func serviceSwaggerJson() (*asset, error) {
	bytes, err := serviceSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.swagger.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service.swagger.json": serviceSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service.swagger.json": &bintree{serviceSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
